# tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
# print(tuple[2:7])

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# def square_digits(num):
#     result = ''
#     numStr = str(num)
#     for i in range(len(numStr)):
#         result += str(int(numStr[i]) ** 2)
#     return int(result)

# print(square_digits(3212))    

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# def spin_words(sentence):
#     result = ''
#     for word in sentence.split():
#         if len(word) >= 5: result += word[::-1] + ' '
#         else: result += word + ' '
#     return result.strip()

# print(spin_words("Hey fellow warriors"))

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# def find_it(seq):
#     dic = {}
    
#     for num in seq:
#         if num in dic: dic[num] += 1
#         else: dic[num] = 1
        
#     for key, value in dic.items():
#         if value % 2 == 1: return key
    
#     return None

# print(find_it([1,1,1,1,2,2,3,3,3,7,7]))
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# def check(seq, elem):
#     for item in seq:
#         if item == elem: return True
#     return False

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# """
# Leetcode 217. Contains Duplicate. Easy
# Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

# Example 1:
# Input: nums = [1,2,3,1]
# Output: true

# Explanation:
# The element 1 occurs at the indices 0 and 3.

# Example 2:
# Input: nums = [1,2,3,4]
# Output: false

# Explanation:
# All elements are distinct.

# Example 3:
# Input: nums = [1,1,1,3,3,4,3,2,4,2]
# Output: true

# Constraints:
# 1 <= nums.length <= 105
# -109 <= nums[i] <= 109
# """
# class Solution(object):
#     def containsDuplicate(self, nums):
#         dic = {}
#         for num in nums:
#             if num in dic: return True
#             else: dic[num] = True
#         return False
        
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

