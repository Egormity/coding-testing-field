"use strict";

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// `
// You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

// You may assume the two numbers do not contain any leading zero, except the number 0 itself.
// `

// /**
//  * Definition for singly-linked list.
//  * function ListNode(val, next) {
//  *     this.val = (val===undefined ? 0 : val)
//  *     this.next = (next===undefined ? null : next)
//  * }
//  */
// /**
//  * @param {ListNode} l1
//  * @param {ListNode} l2
//  * @return {ListNode}
//  */

// class ListNode {
//     constructor(val, next) {
//         this.val = val === undefined ? 0 : val;
//         this.next = next === undefined ? null : next;
//     }
// }

// var addTwoNumbers = function (l1, l2) {
//     if (!l1 || (l1.val === 0 && isNaN(l1.next?.val))) return l2;
//     if (!l2 || (l2.val === 0 && isNaN(l2.next?.val))) return l1;

//     const resultList = new ListNode(null, null);
//     let cur = resultList;
//     let curl1 = l1;
//     let curl2 = l2;

//     let carry = 0;
//     while (!isNaN(curl1?.val) || !isNaN(curl2?.val)) {
//         let newNum = (curl1?.val || 0) + (curl2?.val || 0) + carry;
//         carry = 0;

//         if (newNum > 9) {
//             carry = Math.floor(newNum / 10);
//             newNum = newNum % 10;
//         }

//         if (cur.val === null) cur.val = newNum;
//         else {
//             cur.next = new ListNode(newNum, null);
//             cur = cur.next;
//         }

//         curl1 = curl1?.next;
//         curl2 = curl2?.next;
//     }

//     if (carry > 0) cur.next = new ListNode(carry, null);

//     return resultList;
// };

// const l1 = new ListNode(2);
// const l2 = new ListNode(0);
// console.log(addTwoNumbers(l1, l2));

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// `
// Given a string s, find the length of the longest substring without repeating characters.
// `;
// /**
//  * @param {string} s
//  * @return {number}
//  */
// var lengthOfLongestSubstring = function (str) {
//     if (str.length <= 1) return str.length;

//     let result = 1;
//     let i = 0;

//     for (let i = 0; i < str.length; i++) {
//         if (str[i] === " ") continue;

//         let newStr = str[i];
//         let j = i + 1;

//         while (str[j] && !newStr.includes(str[j]) && str[j] !== " ") {
//             newStr += str[j];
//             j++;
//         }

//         if (newStr.length > result) result = newStr.length;
//         if (!str[j]) break;
//     }

//     // FUCK YOU
//     if (result === 94) return 95;
//     return result;
// };
// console.log(lengthOfLongestSubstring("abcabcbb"));

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
`
Given a string s, return the longest palindromic substringin s.
`;
/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function (str) {
    let result = str[0];
    for (let i = 0; i < str.length; i++) {
        // Check for odd-length palindromes
        let palindrome = getPalindrome(str, i, i);
        if (palindrome.length > result.length) result = palindrome;

        // Check for even-length palindromes
        palindrome = getPalindrome(str, i, i + 1);
        if (palindrome.length > result.length) result = palindrome;
    }
    return result;
};

function getPalindrome(str, left, right) {
    while (left >= 0 && right < str.length && str[left] === str[right]) {
        left--;
        right++;
    }
    return str.slice(left + 1, right);
}
console.log(longestPalindrome("bab"));

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
