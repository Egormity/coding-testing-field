// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// const lengthOfSequence = (arr, n) =>
//   arr.filter(num => num === n).length === 2
//     ? arr.slice(arr.indexOf(n), arr.lastIndexOf(n) + 1).length
//     : 0;
// console.log(lengthOfSequence([2, 2], 2));

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// const sumDigits = num =>
//   (num + '')
//     .split('')
//     .filter(num => num !== '-')
//     .reduce((acc, cur) => (acc += +cur), 0);
// console.log(sumDigits(-18));

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// const solve = s =>
//   s.split('').filter(l => l.toLowerCase() === l).length >= s.length / 2
//     ? s.toLoverCase()
//     : s.toUpperCase();
// console.log(solve('CODde'));

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// function encrypt(text, n) {
//   const e = t =>
//     t
//       .split('')
//       .filter((n, i) => i % 2 === 1)
//       .join('') +
//     t
//       .split('')
//       .filter((n, i) => i % 2 === 0)
//       .join('');
//   let result = text;
//   for (let i = 0; i < n; i++) {
//     result = e(result);
//   }
//   return result;
// }

// function decrypt(encryptedText, n) {
//   const e = t => {
//     let res = '';
//     let cur = t.length % 2 === 0 ? Math.ceil(t.length / 2) : Math.ceil(t.length / 2) - 1;
//     let def = true;
//     for (let i = 0; i < t.length; i++) {
//       res += t[cur];
//       def ? (cur -= Math.floor(t.length / 2)) : (cur += Math.floor(t.length / 2) + 1);
//       def = !def;
//     }
//     return res;
//   };
//   let result = encryptedText;
//   for (let i = 0; i < n; i++) {
//     result = e(result);
//   }
//   return result;
// }

// console.log(encrypt('0123456', 1));
// console.log(decrypt(encrypt('0123456', 1), 1));

// LEAVE ONLY 1 APPEREANCE NUMBERS -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// const array = [1, 1, 2, 2, 3];
// const deleteDuplicates = arr =>
//   arr.filter((el, i) => {
//     const test = arr.slice(0);
//     test.splice(i, 1);
//     return !test.includes(el);
//   });
// console.log(deleteDuplicates(array));

// First non-repeating character -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/// prettier-ignore
// const firstNonRepeatingLetter = str => str.split('').filter((el, i, arr) => {
//     const test = arr.slice(0);
//     test.splice(i, 1);
//     return !test.join('').toLowerCase().includes(el.toLowerCase());
//   }).at(0) || '';

// console.log(firstNonRepeatingLetter('hello'));

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// const solution = list => {
//   const result = [];
//   for (let i = 0; i < list.length; i++) {
//     const num1 = list[i];
//     const tester = [num1];
//     let counter = 1;

//     if (result?.at(-1)?.at(-1) >= num1) continue;

//     for (let j = i; j < list.length; j++) {
//       const num2 = list[j];
//       if (num1 + counter === num2) {
//         tester.push(num2);
//         counter++;
//       }
//     }
//     result.push(tester);
//   }

//   return result
//     .map(el => {
//       if (el.length >= 3) return el.at(0) + '-' + el.at(-1);
//       return el + '';
//     })
//     .join(',');
// };
// console.log(solution([-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20]));

// Next bigger number with the same digits -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// var results = [];
// function permute(arr, memo) {
//   var cur;
//   var memo = memo || [];

//   for (var i = 0; i < arr.length; i++) {
//     cur = arr.splice(i, 1);

//     if (arr.length === 0) {
//       results.push(+memo.concat(cur).join(''));
//     }

//     permute(arr.slice(), memo.concat(cur));
//     arr.splice(i, 0, cur[0]);
//   }
//   return results;
// }

// const nextBigger = n =>
//   permute((n + '').split(''))
//     .sort((a, b) => a - b)
//     .find(el => el > n) || -1;

// console.log(nextBigger(111));

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// const countNums = nums => nums.reduce((cur, acc) => +acc + cur, 0);
// const countDiffer = (a, b) => a.reduce((cur, acc) => +acc + cur, 0) - b.reduce((cur, acc) => +acc + cur, 0);
// const orderWeight = str =>
//   str
//     .split(' ')
//     .map(el => el.split(''))
//     .sort((a, b) => countDiffer(a, b))
//     .sort((a, b) => countNums(a) === countNums(b) && +a[0] - +b[0])
//     .join(' ')
//     .replaceAll(',', '');

// console.log(orderWeight('2000 10003 1234000 44444444 9999 11 11 22 123'));

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// const nums = str => {
//   let tester = true;
//   return str
//     .split('')
//     .reverse()
//     .filter(el => {
//       if (isNaN(+el)) {
//         tester = false;
//         return false;
//       }
//       if (!isNaN(+el) && tester) return true;
//     })
//     .reverse()
//     .join('');
// };
// const incrementString = str =>
//   str.slice(0, str.length - nums(str).length) + (+nums(str) + 1).toString().padStart(nums(str).length, '0');

// Scramblies -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// function scramble(str1, str2) {
//   const arr1 = str1.split('');
//   return str2.split('').every(el => {
//     const result = arr1.join('').includes(el);
//     arr1.splice(arr1.indexOf(el), 1);
//     return result;
//   });
// }
// console.log(scramble('scriptingjava', 'javascript'));

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// function sumIntervals(intervals) {
//   const result = [];
//   for (let i = 0; i < intervals.length; i++) {
//     for (let j = intervals[i][0]; j < intervals[i][1]; j++) {
//       result.push(j);
//     }
//   }
//   return [...new Set(result)].reduce((acc, cur) => acc + 1, 0);
// }

// console.log(
//   sumIntervals([
//     [0, 20],
//     [-100000000, 10],
//     [30, 40],
//   ])
// );

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
